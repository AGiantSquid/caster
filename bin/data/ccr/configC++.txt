from dragonfly import *
from lib import ccr, navigation

release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on")


cmd.map = {
           # Spoken-form    ->    ->    ->     Action object
		"ja <text>":					Function(ccr.camel_case, extra="text"),
		"for <looptype> [<text> [<condition>] [<increment>]] loop":	Function(ccr.format_ecma_loop, extra={"looptype", "text", "condition", "increment"}),
		"score <text>":				Function(ccr.score, extra="text"),		
		
		"public":						Text("public "),
		"private":						Text("private "),
		"static":						Text("static "),
		"final":						Text("final "),
		
		"static cast integer":			Text("static_cast<int>()") + Key("left"),
		"static cast double":			Text("static_cast<double>()") + Key("left"),
		"convert to integer":			Text("(int)"),
		"convert to double":			Text("(double)"),
		
		#"enumerator":					Text("enum"),
				
		"([global] scope | names)":		Text("::"),
		"vector":						Text("vector"),
		"pushback":						Text("push_back"),
		"include":						Text("#include"),
		"standard":						Text("std"),
		"constant":						Text("const"),
		"array":						Mimic("brackets"),
		"return":						Text("return"),
		
		#http://www.learncpp.com/cpp-tutorial/67-introduction-to-pointers/
		"(reference to | address of)":	Text("&"),
		"(pointer | D reference)":		Text("*"),
		"member":						Text("->"),
		
				
		"new":							Text("new "),
		"integer":						Text("int "),
		"double":						Text("double "),
		"character":					Text("char "),
		"big integer":					Text("Integer"),
		"convert to integer":			Text("int()") + Key("left"),
		"convert to string":			Text("to_string") + Key("left"),
		"string":						Text("string "),
		
     	"switch":						Text("switch(){\ncase : break;\ndefault: break;")+Key("up,up,left,left"),
     	"import":						Text( "import " ),
     	"add comment":					Text( "//" ),
        
		"and":                          Text("&&"),
        "or":                           Text("||"),
        "if":                           Text("if() {")+Key("enter,up,left"),
        "else block":                   Text("else {")+Key("enter"),
        "ternary":                      Text("()?;") + (Key("left") * 3),
			

        "<n10a> [<n10b>] [<n10c>] bark":Function(navigation.numbers, extra={"n10a", "n10b", "n10c"}),
     	
          }

cmd.extras   = [
            IntegerRef("n10a", 0, 10),
            IntegerRef("n10b", 0, 10),
            IntegerRef("n10c", 0, 10),
            Dictation("text"),
            Choice("looptype",
                    {"(I | eye)": "letter", "each": "each"
                    }),
              Choice("condition",
                    {"greater than": ">", "less than": "<", "greater than [or] equal to": ">=", "less than [or] equal to": "<=", 
                    }),
              Choice("increment",
                    {"plus": "++", "minus": "--"
                    }),
           ]
cmd.defaults = {
            "n10a": 1, "n10b": -1, "n10c": -1,
           }
    

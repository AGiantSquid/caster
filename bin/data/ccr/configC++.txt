from dragonfly import *

release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on")


cmd.map = {
           # Spoken-form    ->    ->    ->     Action object
		
		# CCR PROGRAMMING STANDARD
		"if":                           Text("if() {")+Key("enter,up,left"),
        "else":        		            Text("else {")+Key("enter"),
        #
        "switch":						Text("switch(){\ncase : break;\ndefault: break;")+Key("up,up,left,left"),
        "case":							Text("case :")+Key("left"),
		"break":						Text("break;"),
		"default":						Text("default: "),
		#
		"do loop":						Text("do {}")+Key("left, enter:2"),
        "while loop":						Text("while ()")+Key("left"),
        "for loop":						Text("for (int i=0; i<VALUE; i++)"),
        "for each":						Text("for_each (VALUE, VALUE, FUNCTION);"),
        #
        "convert to integer":			Text("(int)"),
		"convert to floating point":	Text("(double)"),
		"convert to string":			Text("std::to_string()")+Key("left"),
		#
		"lodge and":                    Text("&&"),
        "lodge or":                     Text("||"),
        "lodge not":					Text("!"),
        #
        "print":						Text("cout <<"),
        #
        "import":						Text("#include"),
        #
        "function":						Text("TYPE NAME(){}")+Key("left"),
        "class":						Text("class NAME{}")+Key("left"),
		#
		"add comment":					Text( "//" ),
		"long comment":					Text("/**/")+Key("left, left"),
		#
		"Val null":						Text("null"),
		#
		"return":						Text("return"),
		#
		"Val true":						Text("true"),
		"Val false":					Text("false"),
		
		
		# C++ specific
		
		"public":						Text("public "),
		"private":						Text("private "),
		"static":						Text("static "),
		"final":						Text("final "),
		
		"static cast integer":			Text("static_cast<int>()") + Key("left"),
		"static cast double":			Text("static_cast<double>()") + Key("left"),
		
		"([global] scope | name)":		Text("::"),
		"Vic":							Text("vector"),
		"pushback":						Text("push_back"),
		
		"standard":						Text("std"),
		"constant":						Text("const"),
		"array":						Mimic("brackets"),
		
		#http://www.learncpp.com/cpp-tutorial/67-introduction-to-pointers/
		"(reference to | address of)":	Text("&"),
		"(pointer | D reference)":		Text("*"),
		"member":						Text("->"),
		
				
		"new":							Text("new "),
		"integer":						Text("int "),
		"double":						Text("double "),
		"character":					Text("char "),
		"big integer":					Text("Integer"),
		"string":						Text("string "),
		
     	"ternary":                      Text("()?;") + (Key("left") * 3),
			

     	
          }

cmd.extras   = [
           ]
cmd.defaults = {
           }
    

from dragonfly import *
release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on") #this gets added on the right side
from dragonfly import *
from lib import ccr
release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on") #this gets added on the right side
from dragonfly import *
release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on") #this gets added on the right side
from dragonfly import *
from lib import navigation, paths, context
navigation.initialize_clipboard()
cmd.map= {
		"semi":							Key("semicolon"),		
        "quotes":						Key("dquote,dquote,left"),
        "thin quotes":					Key("apostrophe,apostrophe,left"),	           
     	"[is] greater than":			Key("rangle"),
     	"[is] less than":				Key("langle"),
     	"[is] greater [than] [or] equal [to]":				   Key("rangle, equals"),
     	"[is] less [than] [or] equal [to]":				   Key("langle, equals"),
     	"[is] equal to":		    	Key("equals,equals"),
        "equals":                       Key("equals"),
        "pair":                     	Text("()")+ Key("left"),
        "[square] (bracket | brackets)":Text("[]")+ Key("left"),
        "curly":                    	Text("{}")+ Key("left"),
        "angle":                    	Text("<>")+ Key("left"),
        "plus":							Text("+"),
        "minus":						Text("-"),
		"pipe symbol": 		            Text("|"),
	    'space [<npn>]':                Key("space")* Repeat(extra="npn"),
    	"excite mark":                  Text("!"),
    	"colon":						Text(":"),
		"(times | star)":				Key("asterisk"),
		"question":						Text("?"),
		"comma":						Text(","),
		"carrot":						Text("^"),					 
		"(period | dot)":				Text("."),
		"at sign":						Text("@"),
		"apostrophe":					Text("'"),
		"underscore":					Text("_"),		
		"backslash":					Text("\\"),
		"slash":						Text("/"),
	    'tabby [<npn>]':                Key("tab")* Repeat(extra="npn"),
	    "boom":							Text(", "),				     	   
		"score <text>":				Function(ccr.score, extra="text"),		
 	   "import":					Text( "import " ),
 	   "from":						Text( "from " ),
 	   "self":						Text("self"),
 	   "self dot":					Text("self")+ Key("dot"),
		"none":						Text("None"),
		"print":					Text("print "),
 	   "add comment":				Text( "#" ),
		"new class":				Key( "as-n, down, down, down, down, enter"),
        "and":                      Text(" and "),
        "or":                       Text(" or "),
        "not":                      Text(" not "),
        "in":                       Text(" in "),
        "if":                       Key("i,f,space,colon,left"),
        "else if":                  Key("e,l,i,f,space,colon,left"),
        "else block":               Text("else:")+Key("enter"),
        "convert to string":		Text("str()")+ Key("left"),
        "convert to integer":		Text("int()")+ Key("left"),
        "length":					Text("len()")+ Key("left"),
        "for each":					Text("for  in :")+ Key("left:5"),
        "for I":					Text("for i in range(0, ):")+ Key("left:2"),
		"while":					Text("while :")+ Key("left"),
		"true":						Text("True"),
		"false":					Text("False"),
		"return":					Text("return "),
		"global":					Text("global "),
        "<n> bark":                 Text("%(n)d"),
        "<n> <n2> bark":            Text("%(n)d%(n2)d"),
        "<n> <n2> <n3> bark":       Text("%(n)d%(n2)d%(n3)d"),
        "string <text> string":     Text("%(text)s"), 
       	"[dot] (pie | pi)":			Text(".py"),
		"jason":					Text("json"),
		"pie to ex":				Text("py2exe"),
		    "alpha": Key("a"),
		    "bravo": Key("b"),
		    "charlie": Key("c"),
		    "delta": Key("d"),
		    "echo": Key("e"),
		    "foxtrot": Key("f"),
		    "golf": Key("g"),
		    "hotel": Key("h"),
		    "India": Key("i"),
		    "Juliet": Key("j"),
		    "kilo": Key("k"),
		    "Lima": Key("l"),
		    "Mike": Key("m"),
		    "November": Key("n"),
		    "oscar": Key("o"),
		    "papa": Key("p"),
		    "Quebec": Key("q"),
		    "Romeo": Key("r"),
		    "Sierra": Key("s"),
		    "tango": Key("t"),
		    "uniform": Key("u"),
		    "victor": Key("v"),
		    "whiskey": Key("w"),
		    "x-ray": Key("x"),
		    "yankee": Key("y"),
		    "Zulu": Key("z"),
					 "big alpha"    : Key("A"),
					 "big bravo"    : Key("B"),
					 "big Charlie"  : Key("C"),
					 "big Delta"    : Key("D"),
					 "big echo"     : Key("E"),
					 "big foxtrot"  : Key("F"),
					 "big golf"     : Key("G"),
					 "big gamma"    : Key("G"),
					 "big Juliet"   : Key("J"),
					 "big hotel"    : Key("H"),
					 "big India"    : Key("I"),
					 "big kilo"     : Key("K"),
					 "big Lima"     : Key("L"),
					 "big Mike"     : Key("M"),
					 "big November" : Key("N"),
					 "big Oscar"    : Key("O"),
					 "big Papa"     : Key("P"),
					 "big Queen"    : Key("Q"),
					 "big Romeo"    : Key("R"),
					 "big Sierra"      : Key("S"),
					 "big tango"    : Key("T"),
					 "big uniform"  : Key("U"),
					 "big Victor"   : Key("V"),
					 "big whiskey"  : Key("W"),
					 "big x-ray"    : Key("X"),
					 "big yankee"   : Key("Y"),
					 "big Zulu"     : Key("Z"),
    'kick':                         Function(navigation.kick),
	'kick mid': 				    Function(navigation.kick_middle),
	'psychic':	 	                Function(navigation.kick_right),
    '(kick double|double kick)':    Playback([(["mouse", "double", "click"], 0.0)]),
    "shift right click":            Key("shift:down")+ Mouse("right")+ Key("shift:up"),
    "scroll [<direction>] <nnv>":   Function(navigation.scroll, extra={'direction', "nnv"}),
    'be grid position mode':        BringApp("pythonw", paths.GRID_PATH, r"--positionMode"),
    'be grid wrap':                 Function(navigation.grid_to_window),
    'be grid':                      Function(navigation.grid_full),
    "curse <direction> [<direction2>] [<n5nv>]":Function(navigation.pixel_jump, extra={"direction","direction2","n5nv"}),
    "left point":                   Playback([(["MouseGrid"], 0.1),(["four", "four"], 0.1),(["click"], 0.0)]),
    "right point":                  Playback([(["MouseGrid"], 0.1),(["six", "six"], 0.1),(["click"], 0.0)]),
    "center point":                 Playback([(["MouseGrid"], 0.1),(["click"], 0.0)]),
    "gopher <direction3> <target>": Function(context.navigate_to_character, extras={"direction3","target"}),    
    "jump in":						Playback([(["gopher", "next", "openers", "right"], 0.0)]),
    "jump out":						Playback([(["gopher", "next", "closers", "right"], 0.0)]),
    "jump back":					Playback([(["gopher", "previous", "openers", "left"], 0.0)]),
    "fill that":					Playback([(["gopher", "previous", "parameter", "left", "color"], 0.0)]),
	'save':                         Key("c-s"),
    'scratch':                      Playback([(["scratch", "that"], 0.0)]),
    'enter [<nnv>]':                Key("enter")* Repeat(extra="nnv"),
    "down [<nnv>]":                 Key("down") * Repeat(extra="nnv"),
    "up [<nnv>]":                   Key("up") * Repeat(extra="nnv"),
    "left [<nnv>]":                 Key("left") * Repeat(extra="nnv"),
    "right [<nnv>]":                Key("right") * Repeat(extra="nnv"),
    "fly [<fly_mode>] [<nnv>]":     Function(navigation.fly, extra={"fly_mode", "nnv"}),
    "color [<color_mode>] [<nnv>]": Function(navigation.color, extra={"color_mode", "nnv"}),
    "shin [<color_mode>] [<nnv>]":  Function(navigation.shin, extra={"color_mode", "nnv"}),
    "find":                         Key("c-f"),
    "replace":                      Key("c-h"),
    "copy [<nnv>]":                 Key("c-c")+Function(navigation.clipboard_to_file, extra="nnv"),
    "cut [<nnv>]":                  Key("c-x")+Function(navigation.clipboard_to_file, extra="nnv"),
    "select all":                   Key("c-a"),
    "drop [<nnv>] [times <n2nv>]":  Function(navigation.drop, extra={"nnv","n2nv"}),
    "delete [<nnv>]":               Key("del/5") * Repeat(extra="nnv"),
    "clear [<nnv>]":                Key("backspace") * Repeat(extra="nnv"),
    "(cancel | escape)":            Key("escape"),
    'auto <mode> <textnv> [go]':    Function(navigation.auto_spell, extra={"mode","textnv"}),
    "wait":							Pause("100"),
}
cmd.extras= [
			IntegerRef("npn", 0, 100),
            IntegerRef("n", 0, 100),
            IntegerRef("n2", 0, 100),
            IntegerRef("n3", 0, 100),
            Dictation("text"),
          IntegerRef("nnv", 1, 500),
          IntegerRef("n2nv", 1, 1000),
          IntegerRef("n5nv", 1, 1000),
          Dictation("textnv"),
          Choice("direction",
                {"up": "up", "down": "down", "left": "left", "right": "right",
                }),
          Choice("direction2",
                {"right": "right", "up": "up", "down": "down", "left": "left", 
                }),
          Choice("direction3",
                {"out": "right", "back out": "left", "next": "right", "previous": "left"
                }),
          Choice("target",
                {"comma": ",", "(period | dot)": ".", "(pair | parentheses)": "(~)",
                "[square] (bracket | brackets)": "[~]", "curly [brace]": "{~}",
                "loop": "for~while", "L paren": "(", "are paren": ")", "openers": "(~[~{",
                "closers": "}~]~)", "parameter": "PARAMETER",
                }),
          Choice("mode",
                {"spell": "spell", "sent": "sent", "crunch": "crunch", "caps": "caps",
                }),
          Choice("color_mode",
                {"left": "left", "back": "back", "up": "up", "down": "down", 
                 "right": "right", "home": "home", "end": "end",
                }),
          Choice("fly_mode",
                {"left": "left", "back": "back", "top": "top", "bottom": "bottom", 
                 "right": "right", "home": "home", "end": "end", "away": "end",
                }),
]
cmd.defaults= {
			"npn": 1,
            "n": 1,
			"nnv": 1,"n2nv": 1,"textnv": "", "n5nv":5, "color_mode":"right", "fly_mode":"right",
           	"direction2":"", 
}

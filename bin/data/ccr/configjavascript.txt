#
# This is a heavily modified version of Dragonfly's _multiedit.py command-module

from dragonfly import *
from lib import ccr

release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on") #this gets added on the right side
noCaps = Mimic("\\no-caps-on")

cmd.map = {
       # Spoken-form    ->    ->    ->     Action object
		"score <text>":				Function(ccr.score, extra="text"),		
       

 	   "import":					Text( "import " ),
		"null":						Text("null"),
 	   "add comment":				Text("//"),
		
		
        # logic shortcuts
        "and":                      Text(" && "),
        "or":                       Text(" || "),
        "not":                      Text("!"),
        
        #continue working from here
        "if":						Text("if (){}")+Key("left, enter:2, up:3, end, home, right:4"),
        "else":						Text("else {}")+Key("left, enter:2, up:3, end, home, right:6"),
        
        "abstract":					Text("abstract"),
        "case":						Text("case :")+Key("left"),
        "continue":					Text("continue"),
        "double":					Text("double "),
        "extends":					Text("extends "),
        "import":					Text("import "),
        "short":					Text("short "),
        "this":						Text("this"),
        "try":						Text("try {\n\n}")+Key("up"),
        
        "do while":					Text("do {\n\n} while ()")+Key("left"),
        "while":					Text("while (){\n\n}")+Key("up:3, end, home, right:7"),
        "for <looptype> [<text> [<condition>] [<increment>]]":	Function(ccr.format_ecma_loop, extra={"looptype", "text", "condition", "increment"}),
        
        "catch":					Text("catch(e) {\n\n}")+Key("up"),
		"false":					Text("false"),
		"function":					Text("function"),
		"in":						Text("in"),
		"long":						Text("long"),
		"private":					Text("private"),
		"static":					Text("static"),
		"throw":					Text("throw"),
		"type of":					Text("typeof"),
		"with":						Text("with"),
		"boolean":					Text("boolean"),
		"char":						Text("char"),
		"default":					Text("default"),
		"enum":						Text("enum"),
		"final":					Text("final"),
		"instance of":				Text("instanceof"),        
        "protected":				Text("protected"),
        "super":					Text("super"),
        "throws":					Text("throws"),
        "var":						Text("var"),
        "break":					Text("break"),
        "class":					Text("class"),
        
        "eval":						Text("eval"),
        "finally":					Text("finally", autofmt=True),
        "integer":					Text("int"),
        "new":						Text("new "),
        "public":					Text("public"),
        "switch":					Text("switch"),
        "void":						Text("void"),
        "byte":						Text("byte"),
        "constant":					Text("const"),
        "float":					Text("float"),
        "implements":				Text("implements"),
        "interface":				Text("interface"),
        "null":						Text("null"),
        "return":					Text("return"),
        "true":						Text("true"),
        
        "<n> bark":                 Text("%(n)d"),
        "<n> <n2> bark":            Text("%(n)d%(n2)d"),
        "<n> <n2> <n3> bark":       Text("%(n)d%(n2)d%(n3)d"),
        "string <text> string":     Text("%(text)s"), 
	   
          }

cmd.extras   = [
            IntegerRef("n", 0, 100),
            IntegerRef("n2", 0, 100),
            IntegerRef("n3", 0, 100),
            Dictation("text"),
              Choice("looptype",
                    {"eye": "letter", "each": "each"
                    }),
              Choice("condition",
                    {"greater than": ">", "less than": "<", "greater than [or] equal to": ">=", "less than [or] equal to": "<=", 
                    }),
              Choice("increment",
                    {"plus": "++", "minus": "--"
                    }),
            
           ]
cmd.defaults = {
            "n": 1, "text": "", "condition": "", "increment": "",
           }

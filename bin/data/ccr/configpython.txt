#
# This is a heavily modified version of Dragonfly's _multiedit.py command-module
#  meant to enable python  syntax with CCR

from dragonfly import *
from lib import ccr, navigation

release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on") #this gets added on the right side

cmd.map = {
        # Spoken-form    ->    ->    ->     Action object
	    "score <text>":				Function(ccr.score, extra="text"),		
		
		# CCR PROGRAMMING STANDARD
		#
		"if":                       Key("i,f,space,colon,left"),
		"else":                     Text("else:")+Key("enter"),		
		#
		# (no switch in Python)
		"break":					Text("break"),
		#
		"for each":					Text("for  in :")+ Key("left:5"),
        "for loop":					Text("for i in range(0, ):")+ Key("left:2"),
		"while":					Text("while :")+ Key("left"),
		# (no do-while in Python)
		#
		"convert to string":		Text("str()")+ Key("left"),
        "convert to integer":		Text("int()")+ Key("left"),
        "convert to floating point":Text("float()")+ Key("left"),
        #
        "and":                      Text(" and "),
        "or":                       Text(" or "),
        "not":                      Text(" not "),
        #
        "print":					Text("print "),
        #
		"import":					Text( "import " ),
		#
		"function":					Text("def "),        
		"class":					Text("class "),
		#
		"add comment":				Text( "#" ),
		"long comment":				Text("''''''") + Key("left:3"),
		#				
		"null":						Text("None"),
		#
		"return":					Text("return "),
		#
		"true":						Text("True"),
		"false":					Text("False"),
				
		
	    # Python specific           
 	    
 	    "from":						Text( "from " ),
 	    "self":						Text("self"),
 	    "not equals":					Text("!="),
		"in":                       Text(" in "),
        "with":						Text("with "),
        "open file":				Text("open('filename','r') as f:"),
        "read lines":				Text("content = f.readlines()"),
        "L if":                  Key("e,l,i,f,space,colon,left"),
        "convert to character": 	Text("chr()")+ Key("left"),
        "length":					Text("len()")+ Key("left"),
 		
	 	"global":					Text("global "),
						
		
         "<n10a> [<n10b>] [<n10c>] bark":Function(navigation.numbers, extra={"n10a", "n10b", "n10c"}),
	   
       	 "[dot] (pie | pi)":			Text(".py"),
		 "jason":					Text("json"),
		 
          }

cmd.extras   = [
            IntegerRef("n10a", 0, 10),
            IntegerRef("n10b", 0, 10),
            IntegerRef("n10c", 0, 10),
            Dictation("text"),
           ]
cmd.defaults = {
            "n10a": 1, "n10b": -1, "n10c": -1,
           }

#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on")

#--------------------------------------------------------------------------
# Here we define the single-action commands.  These can bepop-up spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
           # Spoken-form    ->    ->    ->     Action object
			
           "quotes":						Key("dquote,dquote,left"),
           "thin quotes":						Key("apostrophe,apostrophe,left"),	           
     	   "[is] greater than":				   Key("rangle"),
     	   "[is] less than":				   Key("langle"),
     	   "[is] greater [than] [or] equal [to]":				   Key("rangle, equals"),
     	   "[is] less [than] [or] equal [to]":				   Key("langle, equals"),
     	   "[is] equal to":				   Key("equals,equals"),
     	   "switch":						Text("switch(){\ncase : break;\ndefault: break;")+Key("up,up,left,left"),
     	   "import":						Text( "import " ),
     	   "add comment":					Text( "//" ),
			"new class":				Key( "as-n, down, down, down, down, enter"),
        
		"and":                          Text("&&"),
        "or":                           Text("||"),
        "equals":                       Key("equals"),
        "if":                           Text("if() {")+Key("enter,up,left"),
        "else block":                   Text("else {")+Key("enter"),
        "ternary":                      Text("()?;") + (Key("left") * 3),
        "pair":                     Text("()")+ Key("left"),
        "[square] (bracket | brackets)":    Text("[]")+ Key("left"),
        "curly":                    Text("{}")+ Key("left"),
        "plus":						Text("+"),
        "minus":						Text("-"),
			
			"pipe symbol":             Text("|"),
            "<n> bark":                           Text("%(n)d"),
            "<n> <n2> bark":                           Text("%(n)d%(n2)d"),
            "<n> <n2> <n3> bark":                           Text("%(n)d%(n2)d%(n3)d"),
            "string <text> string":                           Text("%(text)s"), 
	   
       
     	   
          }


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some.words
def format_dot_word(dictation):          # Function name must start with "format_".
    """ dot word <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return ".".join(text.split(" "))  # Put dots between words.

# Format: someWords
def format_java(dictation):
    """ Java <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])
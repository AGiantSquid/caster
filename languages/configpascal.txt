#
# This is a heavily modified version of Dragonfly's _multiedit.py command-module
#  meant to enable python  syntax with CCR

from dragonfly import *

release = Key("shift:up, ctrl:up")
noSpaceNoCaps = Mimic("\\no-caps-on") + Mimic("\\no-space-on") #this gets added on the right side

cmd.map = {
           # Spoken-form    ->    ->    ->     Action object
			
           

		   #Pascal specific macros           
     	   "quotes":						Key("dquote,dquote,left")+noSpaceNoCaps,
           "thin quotes":						Key("apostrophe,apostrophe,left")+noSpaceNoCaps,
     	   "[is] greater than":				   Key("rangle"),
     	   "[is] less than":				   Key("langle"),
     	   "[is] greater [than] [or] equal [to]":				   Key("rangle, equals"),
     	   "[is] less [than] [or] equal [to]":				   Key("langle, equals"),
     	   "[is] equal to":				   Key("equals,equals"),
     	   "import":						Text( "import " ),
     	   "add comment":					Text( "#" ),
			"new class":				Key( "as-n, down, down, down, down, enter"),
        # logic shortcuts
        "and":                          Text(" and "),
        "or":                           Text(" or "),
        "equals":                       Key("equals"),
        "if then":                      Text("if  then"),
        "if then begin":                Text("if  then")+ Key("enter")+ Text("begin\n\nend;")+ Key("up, up,up,left"),
        "function":						Text("function FNAME():RETURNTYPE;\nvar\nNAME:TYPE;\nbegin\n\nend;"),
        "procedure":						Text("procedure PNAME();\nvar\nNAME:TYPE;\nbegin\n\nend;"),
        
        "pair":                     Text("()")+ Key("left"),
        "[square] (bracket | brackets)":    Text("[]")+ Key("left"),
        "curly":                    Text("{}")+ Key("left"),
        "plus":						Text("+"),
        "minus":						Text("-"),
        "for each":					Text("for  in :")+ Key("left:5"),
        "for I":					Text("for i in range(0, ):")+ Key("left:2"),
			
			"pipe symbol":             Text("|"),
            "<n> bark":                           Text("%(n)d"),
            "<n> <n2> bark":                           Text("%(n)d%(n2)d"),
            "<n> <n2> <n3> bark":                           Text("%(n)d%(n2)d%(n3)d"),
            "string <text> string":                           Text("%(text)s"), 
	   
       
     	   
          }


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some.words
def format_dot_word(dictation):          # Function name must start with "format_".
    """ dot word <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return ".".join(text.split(" "))  # Put dots between words.

# Format: some_words
def format_score(dictation):
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return "_".join(text.split(" ")) #